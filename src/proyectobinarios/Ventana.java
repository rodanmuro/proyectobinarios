/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectobinarios;

import java.awt.event.ItemEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.table.DefaultTableModel;
import net.iharder.dnd.*;
import org.oxbow.swingbits.table.filter.TableRowFilterSupport;

/**
 *
 * @author Usuario
 */
public class Ventana extends javax.swing.JFrame {

    Constantes C;
    Connection CONN;
    EstudiantesNoHanVistoNRC ENHV;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();

        iniciarConstantes();

        jDialogCarga.setLocationRelativeTo(this);

        CONN = ConsultasSQL.conexionBD(ConsultasSQL.NOMBREBDOFERTAEDUCATIVA);

        ConsultasSQL.crearTablaTemporalEstudiantesActivosArgosSinRepetir(CONN);

        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloHistorialAcademico, 0, C.CABECERASHISTORIALACADEMICO);
        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloHistorialAcademico, 1, C.TIPOSDEDATOSHISTORIALACADEMICO);

        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloEstudiantesActivos, 0, C.CABECERASNRCESTUDIANTESACTIVOS);
        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloEstudiantesActivos, 1, C.TIPOSDEDATOSNRCESTUDIANTESACTIVOS);

        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloCurriculos, 0, C.CABECERASCURRICULOS);
        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloCurriculos, 1, C.TIPODEDATOSCURRICULOS);

        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloEstudiantesActivosGeneral, 0, C.CABECERASESTUDIANTESACTIVOSGENERAL);
        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloEstudiantesActivosGeneral, 1, C.TIPOSDEDATOSESTUDIANTESACTIVOSGENERAL);

        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloProgramacionArgos, 0, C.CABECERASPROGRAMACIONACADEMICAARGOS);
        FuncionesJTable.cargarDatosColumnaAJTableDesdeCSV(jTableModeloProgramacionArgos, 1, C.TIPOSDEDATOSPROGRAMACIONACADEMICAARGOS);

        FuncionesJTable.agregarColumnaValidadaTipoDatosJTable(jTableModeloHistorialAcademico, 1);
        FuncionesJTable.agregarColumnaValidadaTipoDatosJTable(jTableModeloEstudiantesActivos, 1);
        FuncionesJTable.agregarColumnaValidadaTipoDatosJTable(jTableModeloCurriculos, 1);
        FuncionesJTable.agregarColumnaValidadaTipoDatosJTable(jTableModeloEstudiantesActivosGeneral, 1);
        FuncionesJTable.agregarColumnaValidadaTipoDatosJTable(jTableModeloProgramacionArgos, 1);

        FuncionesJTable.agregarEventosJTable(jTableModeloHistorialAcademico);
        FuncionesJTable.agregarEventosJTable(jTableModeloEstudiantesActivos);
        FuncionesJTable.agregarEventosJTable(jTableModeloCurriculos);
        FuncionesJTable.agregarEventosJTable(jTableModeloEstudiantesActivosGeneral);
        FuncionesJTable.agregarEventosJTable(jTableModeloProgramacionArgos);
//
        EstudiantesPorPrograma.inicializarListadoCarrerasEnEstudiantesPorPrograma(CONN, jComboBoxCarrerasEstudiantesPrograma);
        EstudiantesPorPrograma.inicializarComboBoxCurriculos(CONN, jComboBoxCarrerasEstudiantesPrograma, jComboBoxCurriculo);
        EstudiantesPorPrograma.cargarDescripcionCarreraEnTextField(CONN, jComboBoxCarrerasEstudiantesPrograma, jTextFieldDescripcionCarrera);
        EstudiantesPorPrograma.cargarSedesComboBox(CONN, jComboBoxSedeEstudiantesPrograma);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogCarga = new javax.swing.JDialog();
        jPanel15 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelConfiguracionCabeceras = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableModeloHistorialAcademico = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableModeloEstudiantesActivos = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableModeloCurriculos = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableModeloEstudiantesActivosGeneral = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableModeloProgramacionArgos = new javax.swing.JTable();
        jPanelArchivosInsumos = new javax.swing.JPanel();
        jPanelHistorialAcademico = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxHistorial = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListHistorialAcademico = new javax.swing.JList<>();
        jPanelEstudiantesActivos = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxEstudiantesActivosNRC = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListNRCEstudiantesActivos = new javax.swing.JList<>();
        jPanelCurriculos = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxCurriculos = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListCurriculos = new javax.swing.JList<>();
        jPanelEstudiantesActivosGeneral = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxEstudiantesActivosGeneral = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListEstudiantesActivosGeneral = new javax.swing.JList<>();
        jPanelProgramacionAcademicaArgos = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBoxProgramacionArgos = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListProgramacionAcademicaArgos = new javax.swing.JList<>();
        jPanelBotonesValidar = new javax.swing.JPanel();
        jButtonValidarCabecerasArchivosInsumos = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanelHistorialEstudiante = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldIDESTUDIANTE = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldProgramaHistorial = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldAnoIngreso = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldCurriculoHistorial = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTableHistorialAcademicoEstudiante = new javax.swing.JTable();
        jPanelEstudiantesPorPrograma = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jComboBoxCarrerasEstudiantesPrograma = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldDescripcionCarrera = new javax.swing.JTextField();
        jButtonNoLoHanVistoPrograma = new javax.swing.JButton();
        jButtonNoLoHanVistoTotal = new javax.swing.JButton();
        jLabelCurriculo = new javax.swing.JLabel();
        jComboBoxCurriculo = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jTextFieldTotalMatriculadosArgos = new javax.swing.JTextField();
        jButtonLoPuedenVerPrograma = new javax.swing.JButton();
        jButtonLoPuedenVerTotal = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jComboBoxSedeEstudiantesPrograma = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldTotalMatriculadosEstudiantesPorProgramaGeneral = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTableEstudiantesPorPrograma = new javax.swing.JTable();

        jDialogCarga.setBackground(new java.awt.Color(255, 255, 0));
        jDialogCarga.setModal(true);
        jDialogCarga.setUndecorated(true);
        jDialogCarga.setPreferredSize(new java.awt.Dimension(500, 200));
        jDialogCarga.setSize(new java.awt.Dimension(110, 93));
        jDialogCarga.getContentPane().setLayout(new javax.swing.BoxLayout(jDialogCarga.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setLayout(new javax.swing.BoxLayout(jPanel15, javax.swing.BoxLayout.LINE_AXIS));
        jDialogCarga.getContentPane().add(jPanel15);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectobinarios/cargando2.gif"))); // NOI18N
        jDialogCarga.getContentPane().add(jLabel14);

        jDialogCarga.getAccessibleContext().setAccessibleParent(jTabbedPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanelConfiguracionCabeceras.setAutoscrolls(true);
        jPanelConfiguracionCabeceras.setMaximumSize(new java.awt.Dimension(2000, 2000));
        jPanelConfiguracionCabeceras.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanelConfiguracionCabeceras.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanelConfiguracionCabecerasFocusLost(evt);
            }
        });

        jScrollPane8.setPreferredSize(new java.awt.Dimension(584, 802));

        jPanel10.setLayout(new java.awt.GridLayout(5, 1));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel6.setText("<html><h3>Archivos de historial académico</h3></html>");
        jPanel3.add(jLabel6, java.awt.BorderLayout.NORTH);

        jScrollPane6.setPreferredSize(new java.awt.Dimension(452, 200));

        jTableModeloHistorialAcademico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cabeceras", "Tipo de datos"
            }
        ));
        jTableModeloHistorialAcademico.setCellSelectionEnabled(true);
        jTableModeloHistorialAcademico.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableModeloHistorialAcademico.getTableHeader().setReorderingAllowed(false);
        jTableModeloHistorialAcademico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableModeloHistorialAcademicoFocusLost(evt);
            }
        });
        jTableModeloHistorialAcademico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableModeloHistorialAcademicoMouseClicked(evt);
            }
        });
        jTableModeloHistorialAcademico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableModeloHistorialAcademicoKeyPressed(evt);
            }
        });
        jScrollPane6.setViewportView(jTableModeloHistorialAcademico);

        jPanel3.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel9.setText("<html><h3>Archivo de NRCS de estudiantes activos</h3></html>");
        jPanel4.add(jLabel9, java.awt.BorderLayout.NORTH);

        jScrollPane7.setPreferredSize(new java.awt.Dimension(452, 200));

        jTableModeloEstudiantesActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cabeceras", "Tipo de datos"
            }
        ));
        jTableModeloEstudiantesActivos.setCellSelectionEnabled(true);
        jTableModeloEstudiantesActivos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableModeloEstudiantesActivos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableModeloEstudiantesActivos.getTableHeader().setReorderingAllowed(false);
        jTableModeloEstudiantesActivos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableModeloEstudiantesActivosFocusLost(evt);
            }
        });
        jTableModeloEstudiantesActivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableModeloEstudiantesActivosMouseClicked(evt);
            }
        });
        jTableModeloEstudiantesActivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableModeloEstudiantesActivosKeyPressed(evt);
            }
        });
        jScrollPane7.setViewportView(jTableModeloEstudiantesActivos);

        jPanel4.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel12.setText("<html><h3>Archivo de currículos</h3></html>");
        jPanel5.add(jLabel12, java.awt.BorderLayout.NORTH);

        jScrollPane9.setPreferredSize(new java.awt.Dimension(452, 200));

        jTableModeloCurriculos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cabeceras", "Tipo de datos"
            }
        ));
        jTableModeloCurriculos.setCellSelectionEnabled(true);
        jTableModeloCurriculos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableModeloCurriculos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableModeloCurriculos.getTableHeader().setReorderingAllowed(false);
        jTableModeloCurriculos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableModeloCurriculosFocusLost(evt);
            }
        });
        jTableModeloCurriculos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableModeloCurriculosMouseClicked(evt);
            }
        });
        jTableModeloCurriculos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableModeloCurriculosKeyPressed(evt);
            }
        });
        jScrollPane9.setViewportView(jTableModeloCurriculos);

        jPanel5.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jLabel15.setText("<html><h3>Archivo de estudiantes activos general</h3></html>");
        jPanel6.add(jLabel15, java.awt.BorderLayout.NORTH);

        jScrollPane10.setPreferredSize(new java.awt.Dimension(452, 200));

        jTableModeloEstudiantesActivosGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cabeceras", "Tipo de datos"
            }
        ));
        jTableModeloEstudiantesActivosGeneral.setCellSelectionEnabled(true);
        jTableModeloEstudiantesActivosGeneral.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableModeloEstudiantesActivosGeneral.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableModeloEstudiantesActivosGeneral.getTableHeader().setReorderingAllowed(false);
        jTableModeloEstudiantesActivosGeneral.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableModeloEstudiantesActivosGeneralFocusLost(evt);
            }
        });
        jTableModeloEstudiantesActivosGeneral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableModeloEstudiantesActivosGeneralMouseClicked(evt);
            }
        });
        jTableModeloEstudiantesActivosGeneral.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableModeloEstudiantesActivosGeneralKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(jTableModeloEstudiantesActivosGeneral);

        jPanel6.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel18.setText("<html><h3>Archivo de programación académica desde Argos</h3></html>");
        jPanel7.add(jLabel18, java.awt.BorderLayout.NORTH);

        jScrollPane11.setPreferredSize(new java.awt.Dimension(452, 200));

        jTableModeloProgramacionArgos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cabeceras", "Tipo de datos"
            }
        ));
        jTableModeloProgramacionArgos.setCellSelectionEnabled(true);
        jTableModeloProgramacionArgos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableModeloProgramacionArgos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableModeloProgramacionArgos.getTableHeader().setReorderingAllowed(false);
        jTableModeloProgramacionArgos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableModeloProgramacionArgosFocusLost(evt);
            }
        });
        jTableModeloProgramacionArgos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableModeloProgramacionArgosMouseClicked(evt);
            }
        });
        jTableModeloProgramacionArgos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableModeloProgramacionArgosKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(jTableModeloProgramacionArgos);

        jPanel7.add(jScrollPane11, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel7);

        jScrollPane8.setViewportView(jPanel10);

        javax.swing.GroupLayout jPanelConfiguracionCabecerasLayout = new javax.swing.GroupLayout(jPanelConfiguracionCabeceras);
        jPanelConfiguracionCabeceras.setLayout(jPanelConfiguracionCabecerasLayout);
        jPanelConfiguracionCabecerasLayout.setHorizontalGroup(
            jPanelConfiguracionCabecerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1572, Short.MAX_VALUE)
        );
        jPanelConfiguracionCabecerasLayout.setVerticalGroup(
            jPanelConfiguracionCabecerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Configuración de cabeceras", jPanelConfiguracionCabeceras);

        jPanelArchivosInsumos.setLayout(new javax.swing.BoxLayout(jPanelArchivosInsumos, javax.swing.BoxLayout.Y_AXIS));

        jPanelHistorialAcademico.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText("Arrastre los archivos de historial académico acá:");
        jPanel9.add(jLabel1);
        jPanel9.add(jCheckBoxHistorial);

        jPanelHistorialAcademico.add(jPanel9);

        jListHistorialAcademico.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dragDropjList(jListHistorialAcademico);
        jListHistorialAcademico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListHistorialAcademicoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jListHistorialAcademico);

        jPanelHistorialAcademico.add(jScrollPane1);

        jPanelArchivosInsumos.add(jPanelHistorialAcademico);

        jPanelEstudiantesActivos.setLayout(new java.awt.GridLayout(2, 1));

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setText("<html>Arrastre acá el archivo con los estudiantes activos <br> por NRC:</html>");
        jPanel12.add(jLabel2);
        jPanel12.add(jCheckBoxEstudiantesActivosNRC);

        jPanelEstudiantesActivos.add(jPanel12);

        jListNRCEstudiantesActivos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dragDropjList(jListNRCEstudiantesActivos);
        jListNRCEstudiantesActivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListNRCEstudiantesActivosKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jListNRCEstudiantesActivos);

        jPanelEstudiantesActivos.add(jScrollPane2);

        jPanelArchivosInsumos.add(jPanelEstudiantesActivos);

        jPanelCurriculos.setLayout(new java.awt.GridLayout(2, 1));

        jPanel14.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setText("<html>Arrastre acá el archivo con los currículos:</html>");
        jPanel14.add(jLabel3);
        jPanel14.add(jCheckBoxCurriculos);

        jPanelCurriculos.add(jPanel14);

        jListCurriculos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dragDropjList(jListCurriculos);
        jListCurriculos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListCurriculosKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jListCurriculos);

        jPanelCurriculos.add(jScrollPane3);

        jPanelArchivosInsumos.add(jPanelCurriculos);

        jPanelEstudiantesActivosGeneral.setLayout(new java.awt.GridLayout(2, 1));

        jPanel16.setLayout(new java.awt.GridLayout(1, 0));

        jLabel4.setText("<html>Arrastre acá el archivo de estudiantes activos<br> general:</html>");
        jPanel16.add(jLabel4);
        jPanel16.add(jCheckBoxEstudiantesActivosGeneral);

        jPanelEstudiantesActivosGeneral.add(jPanel16);

        jListEstudiantesActivosGeneral.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dragDropjList(jListEstudiantesActivosGeneral);
        jListEstudiantesActivosGeneral.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListEstudiantesActivosGeneralKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jListEstudiantesActivosGeneral);

        jPanelEstudiantesActivosGeneral.add(jScrollPane4);

        jPanelArchivosInsumos.add(jPanelEstudiantesActivosGeneral);

        jPanelProgramacionAcademicaArgos.setLayout(new java.awt.GridLayout(2, 1));

        jPanel18.setLayout(new java.awt.GridLayout(1, 0));

        jLabel5.setText("<html>Arrastre acá el archivo de programación <br>académica de Argos</html>");
        jPanel18.add(jLabel5);
        jPanel18.add(jCheckBoxProgramacionArgos);

        jPanelProgramacionAcademicaArgos.add(jPanel18);

        jListProgramacionAcademicaArgos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dragDropjList(jListProgramacionAcademicaArgos);
        jListProgramacionAcademicaArgos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListProgramacionAcademicaArgosKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jListProgramacionAcademicaArgos);

        jPanelProgramacionAcademicaArgos.add(jScrollPane5);

        jPanelArchivosInsumos.add(jPanelProgramacionAcademicaArgos);

        jPanelBotonesValidar.setLayout(new java.awt.GridLayout(1, 3, 30, 5));

        jButtonValidarCabecerasArchivosInsumos.setText("Validar Cabeceras");
        jButtonValidarCabecerasArchivosInsumos.setToolTipText("<html>Compara las cabeceras en el archivo CSV seleccionado por el checkbox, <br>y la cadena existente para el mismo archivo en la pestaña de Configuración de cabeceras.</html>");
        jButtonValidarCabecerasArchivosInsumos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarCabecerasArchivosInsumosActionPerformed(evt);
            }
        });
        jPanelBotonesValidar.add(jButtonValidarCabecerasArchivosInsumos);

        jButton1.setText("Validar Columnas");
        jButton1.setToolTipText("<html>Permite validar los archivos CSV, determinando si el contenido de cada una de sus columnas <br> está acorde con el tipo de datos que está escrigo en la ventana de Configuración de cabeceras</html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelBotonesValidar.add(jButton1);

        jButton2.setText("Insertar datos");
        jButton2.setToolTipText("<html>Inserta los datos del archivo CSV a la base de datos del programa. No sobreescribe los datos</html>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanelBotonesValidar.add(jButton2);

        jPanelArchivosInsumos.add(jPanelBotonesValidar);

        jTabbedPane1.addTab("Archivos de insumos", jPanelArchivosInsumos);

        jPanelHistorialEstudiante.setLayout(new java.awt.BorderLayout(10, 10));

        jPanel11.setLayout(new java.awt.GridLayout(3, 4, 5, 10));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("ID ESTUDIANTE:");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel11.add(jLabel7);

        jTextFieldIDESTUDIANTE.setText("248962");
        jTextFieldIDESTUDIANTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIDESTUDIANTEActionPerformed(evt);
            }
        });
        jTextFieldIDESTUDIANTE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldIDESTUDIANTEKeyPressed(evt);
            }
        });
        jPanel11.add(jTextFieldIDESTUDIANTE);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("NOMBRE:");
        jPanel11.add(jLabel8);
        jPanel11.add(jTextFieldNombre);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("PROGRAMA:");
        jPanel11.add(jLabel10);
        jPanel11.add(jTextFieldProgramaHistorial);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("AÑO INGRESO:");
        jPanel11.add(jLabel11);
        jPanel11.add(jTextFieldAnoIngreso);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("CURRÍCULO:");
        jPanel11.add(jLabel13);
        jPanel11.add(jTextFieldCurriculoHistorial);

        jPanelHistorialEstudiante.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel13.setBackground(new java.awt.Color(102, 255, 51));
        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane12.setBackground(new java.awt.Color(0, 255, 204));
        jScrollPane12.setForeground(new java.awt.Color(255, 255, 255));

        jTableHistorialAcademicoEstudiante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10"
            }
        ));
        jScrollPane12.setViewportView(jTableHistorialAcademicoEstudiante);

        jPanel13.add(jScrollPane12);

        jPanelHistorialEstudiante.add(jPanel13, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Historial Estudiante", jPanelHistorialEstudiante);

        jPanelEstudiantesPorPrograma.setLayout(new java.awt.BorderLayout(5, 10));

        jPanel1.setLayout(new java.awt.GridLayout(3, 6, 5, 5));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Carreras:");
        jPanel1.add(jLabel16);

        jComboBoxCarrerasEstudiantesPrograma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        jComboBoxCarrerasEstudiantesPrograma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCarrerasEstudiantesProgramaItemStateChanged(evt);
            }
        });
        jComboBoxCarrerasEstudiantesPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCarrerasEstudiantesProgramaActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxCarrerasEstudiantesPrograma);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Descripción:");
        jPanel1.add(jLabel19);
        jPanel1.add(jTextFieldDescripcionCarrera);

        jButtonNoLoHanVistoPrograma.setText("NoLoHanVisto Programa");
        jPanel1.add(jButtonNoLoHanVistoPrograma);

        jButtonNoLoHanVistoTotal.setText("NoLoHanVisto Total");
        jPanel1.add(jButtonNoLoHanVistoTotal);

        jLabelCurriculo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCurriculo.setText("Currículo:");
        jPanel1.add(jLabelCurriculo);

        jComboBoxCurriculo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        jComboBoxCurriculo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCurriculoItemStateChanged(evt);
            }
        });
        jPanel1.add(jComboBoxCurriculo);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Total Matriculados Argos:");
        jPanel1.add(jLabel21);
        jPanel1.add(jTextFieldTotalMatriculadosArgos);

        jButtonLoPuedenVerPrograma.setText("LoPuedenVer Programa");
        jButtonLoPuedenVerPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoPuedenVerProgramaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLoPuedenVerPrograma);

        jButtonLoPuedenVerTotal.setText("LoPuedenVerTotal");
        jButtonLoPuedenVerTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoPuedenVerTotalActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLoPuedenVerTotal);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Sede:");
        jPanel1.add(jLabel20);

        jComboBoxSedeEstudiantesPrograma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        jComboBoxSedeEstudiantesPrograma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSedeEstudiantesProgramaItemStateChanged(evt);
            }
        });
        jPanel1.add(jComboBoxSedeEstudiantesPrograma);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Total Matriculados General:");
        jPanel1.add(jLabel17);
        jPanel1.add(jTextFieldTotalMatriculadosEstudiantesPorProgramaGeneral);

        jPanelEstudiantesPorPrograma.add(jPanel1, java.awt.BorderLayout.NORTH);

        jTableEstudiantesPorPrograma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Asignatura", "Semestre", "AlfaNumerico", "No la han visto", "La pueden ver", "Vista y Reprobada"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jTableEstudiantesPorPrograma.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTableEstudiantesPorProgramaMouseClicked(evt);
        }
    });
    jScrollPane13.setViewportView(jTableEstudiantesPorPrograma);

    jPanelEstudiantesPorPrograma.add(jScrollPane13, java.awt.BorderLayout.CENTER);

    jTabbedPane1.addTab("Estudiantes por Programa", jPanelEstudiantesPorPrograma);

    getContentPane().add(jTabbedPane1);

    pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jListProgramacionAcademicaArgosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListProgramacionAcademicaArgosKeyReleased
        // TODO add your handling code here:
        eliminarElmentoJlist(jListProgramacionAcademicaArgos, evt);
    }//GEN-LAST:event_jListProgramacionAcademicaArgosKeyReleased

    private void jListEstudiantesActivosGeneralKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListEstudiantesActivosGeneralKeyReleased
        // TODO add your handling code here:
        eliminarElmentoJlist(jListEstudiantesActivosGeneral, evt);
    }//GEN-LAST:event_jListEstudiantesActivosGeneralKeyReleased

    private void jListCurriculosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListCurriculosKeyReleased
        // TODO add your handling code here:
        eliminarElmentoJlist(jListCurriculos, evt);
    }//GEN-LAST:event_jListCurriculosKeyReleased

    private void jListNRCEstudiantesActivosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListNRCEstudiantesActivosKeyReleased
        // TODO add your handling code here:
        eliminarElmentoJlist(jListNRCEstudiantesActivos, evt);
    }//GEN-LAST:event_jListNRCEstudiantesActivosKeyReleased

    private void jListHistorialAcademicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListHistorialAcademicoKeyReleased
        // TODO add your handling code here:
        eliminarElmentoJlist(jListHistorialAcademico, evt);
    }//GEN-LAST:event_jListHistorialAcademicoKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:


    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        guardarDatos();
        cerrarConexionBD();
    }//GEN-LAST:event_formWindowClosing

    private void jButtonValidarCabecerasArchivosInsumosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarCabecerasArchivosInsumosActionPerformed
        // TODO add your handling code here:
        guardarDatos();
        iniciarConstantes();

        ArrayList<String> validacionesHistorial = new ArrayList<String>();
        ArrayList<String> validacionesCurriculo = new ArrayList<String>();
        ArrayList<String> validacionesEstudiantesActivos = new ArrayList<String>();
        ArrayList<String> validacionesEstudiantesActivosGeneral = new ArrayList<String>();
        ArrayList<String> validacionesProgramacionArgos = new ArrayList<String>();
//
        if (jCheckBoxHistorial.isSelected()) {
            if (jListHistorialAcademico.getModel().getSize() > 0) {
                validacionesHistorial = Validaciones.validarCabecerasArchivoCSV(C.CABECERASHISTORIALACADEMICO, jListHistorialAcademico.getModel().getElementAt(0));
            }
        }
        if (jCheckBoxEstudiantesActivosNRC.isSelected()) {
            if (jListNRCEstudiantesActivos.getModel().getSize() > 0) {
                validacionesEstudiantesActivos = Validaciones.validarCabecerasArchivoCSV(C.CABECERASNRCESTUDIANTESACTIVOS, jListNRCEstudiantesActivos.getModel().getElementAt(0));
            }
        }
        if (jCheckBoxCurriculos.isSelected()) {
            if (jListCurriculos.getModel().getSize() > 0) {
                validacionesCurriculo = Validaciones.validarCabecerasArchivoCSV(C.CABECERASCURRICULOS, jListCurriculos.getModel().getElementAt(0));
            }
        }
        if (jCheckBoxEstudiantesActivosGeneral.isSelected()) {
            if (jListEstudiantesActivosGeneral.getModel().getSize() > 0) {
                validacionesEstudiantesActivosGeneral = Validaciones.validarCabecerasArchivoCSV(C.CABECERASESTUDIANTESACTIVOSGENERAL, jListEstudiantesActivosGeneral.getModel().getElementAt(0));
            }
        }
        if (jCheckBoxProgramacionArgos.isSelected()) {
            if (jListProgramacionAcademicaArgos.getModel().getSize() > 0) {
                validacionesProgramacionArgos = Validaciones.validarCabecerasArchivoCSV(C.CABECERASPROGRAMACIONACADEMICAARGOS, jListProgramacionAcademicaArgos.getModel().getElementAt(0));
            }
        }

        String compendioValidaciones = "<html>"
                + "El resultado de validar los archivos seleccionados y comparar sus cabeceras con las escritas en la pestaña de Configuración de cabeceras es: <br>"
                + "<h3>Validación para historial</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesHistorial)
                + "<h3>Validación para estudiantes activos</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesEstudiantesActivos)
                + "<h3>Validación para currículos</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesCurriculo)
                + "<h3>Validación para estudiantes activos general</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesEstudiantesActivosGeneral)
                + "<h3>Validación para programación académica Argos</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesProgramacionArgos)
                + "</html>";

        JOptionPane.showMessageDialog(null, compendioValidaciones);
    }//GEN-LAST:event_jButtonValidarCabecerasArchivosInsumosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        guardarDatos();
        iniciarConstantes();

        ArrayList<String> validacionesHistorial = new ArrayList<String>();
        ArrayList<String> validacionesCurriculo = new ArrayList<String>();
        ArrayList<String> validacionesEstudiantesActivos = new ArrayList<String>();
        ArrayList<String> validacionesEstudiantesActivosGeneral = new ArrayList<String>();
        ArrayList<String> validacionesProgramacionArgos = new ArrayList<String>();
//
        if (jCheckBoxHistorial.isSelected()) {
            if (jListHistorialAcademico.getModel().getSize() > 0) {
                validacionesHistorial = Validaciones.validarColumnaCSVArchivo(jListHistorialAcademico, C.TIPOSDEDATOSHISTORIALACADEMICO);
            }
        }
        if (jCheckBoxEstudiantesActivosNRC.isSelected()) {
            if (jListNRCEstudiantesActivos.getModel().getSize() > 0) {
                validacionesEstudiantesActivos = Validaciones.validarColumnaCSVArchivo(jListNRCEstudiantesActivos, C.TIPOSDEDATOSNRCESTUDIANTESACTIVOS);
            }
        }
        if (jCheckBoxCurriculos.isSelected()) {
            if (jListCurriculos.getModel().getSize() > 0) {
                validacionesCurriculo = Validaciones.validarColumnaCSVArchivo(jListCurriculos, C.TIPODEDATOSCURRICULOS);
            }
        }
        if (jCheckBoxEstudiantesActivosGeneral.isSelected()) {
            if (jListEstudiantesActivosGeneral.getModel().getSize() > 0) {
                validacionesEstudiantesActivosGeneral = Validaciones.validarColumnaCSVArchivo(jListEstudiantesActivosGeneral, C.TIPOSDEDATOSESTUDIANTESACTIVOSGENERAL);
            }
        }
        if (jCheckBoxProgramacionArgos.isSelected()) {
            if (jListProgramacionAcademicaArgos.getModel().getSize() > 0) {
                validacionesProgramacionArgos = Validaciones.validarColumnaCSVArchivo(jListProgramacionAcademicaArgos, C.TIPOSDEDATOSPROGRAMACIONACADEMICAARGOS);
            }
        }

        String compendioValidaciones = "<html>"
                + "El resultado de validar los archivos seleccionados y comparar sus tipos de datos con las escritas en la pestaña de Configuración de cabeceras es: <br>"
                + "<h3>Validación para historial</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesHistorial)
                + "<h3>Validación para estudiantes activos</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesEstudiantesActivos)
                + "<h3>Validación para currículos</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesCurriculo)
                + "<h3>Validación para estudiantes activos general</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesEstudiantesActivosGeneral)
                + "<h3>Validación para programación académica Argos</h3>"
                + Validaciones.deArrayListALineasHTML(validacionesProgramacionArgos)
                + "</html>";

        JOptionPane.showMessageDialog(null, compendioValidaciones);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        int confirmacion = mensajeConfirmacionCancelarPorDefecto(
                "Se ingresarán datos a la base de datos, sobreescribiendo los datos previos. "
                + " Esta operación no se puede deshacer. ¿Desea continuar?");
        if (confirmacion == 0) {

            if (jCheckBoxHistorial.isSelected()) {
                ConsultasSQL.eliminarTablaSiExiste(CONN, ConsultasSQL.NOMBREBDOFERTAEDUCATIVA, ConsultasSQL.TABLAHISTORIALACADEMICO);
                ConsultasSQL.importarBaseDatosSqlite(ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAHISTORIALACADEMICO,
                        jListHistorialAcademico.getModel().getElementAt(0),
                        ConsultasSQL.CODIFICACIONORIGEN, ConsultasSQL.CODIFICACIODESTINO,
                        true);
            }
            if (jCheckBoxEstudiantesActivosNRC.isSelected()) {
                ConsultasSQL.eliminarTablaSiExiste(CONN, ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAESTUDIANTESACTIVOSNRC);
                ConsultasSQL.importarBaseDatosSqlite(ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAESTUDIANTESACTIVOSNRC,
                        jListNRCEstudiantesActivos.getModel().getElementAt(0),
                        ConsultasSQL.CODIFICACIONORIGEN, ConsultasSQL.CODIFICACIODESTINO,
                        true);
            }
            if (jCheckBoxEstudiantesActivosGeneral.isSelected()) {
                ConsultasSQL.eliminarTablaSiExiste(CONN, ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAESTUDIANTESACTIVOSGENERAL);
                ConsultasSQL.importarBaseDatosSqlite(ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAESTUDIANTESACTIVOSGENERAL,
                        jListEstudiantesActivosGeneral.getModel().getElementAt(0),
                        ConsultasSQL.CODIFICACIONORIGEN, ConsultasSQL.CODIFICACIODESTINO,
                        true);
            }
            if (jCheckBoxProgramacionArgos.isSelected()) {
                ConsultasSQL.eliminarTablaSiExiste(CONN, ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAPROGRAMACIONACADEMICAARGOS);
                ConsultasSQL.importarBaseDatosSqlite(ConsultasSQL.NOMBREBDOFERTAEDUCATIVA,
                        ConsultasSQL.TABLAPROGRAMACIONACADEMICAARGOS,
                        jListProgramacionAcademicaArgos.getModel().getElementAt(0),
                        ConsultasSQL.CODIFICACIONORIGEN, ConsultasSQL.CODIFICACIODESTINO,
                        true);
            }

            if (jCheckBoxCurriculos.isSelected()) {
                ConsultasSQL.cargarTablaAsignaturasBD(CONN, jListCurriculos.getModel().getElementAt(0));
                ConsultasSQL.cargarTablaCarrerasBD(CONN, jListCurriculos.getModel().getElementAt(0));
            }

            JOptionPane.showMessageDialog(null, "Se han terminado de cargar las bases de datos");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTableModeloHistorialAcademicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableModeloHistorialAcademicoMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int indiceSelecionado = jTableModeloHistorialAcademico.getSelectedRow();
            if (indiceSelecionado == -1) {
                JOptionPane.showMessageDialog(null, "Seleccione una fila");
            } else {
                int eleccion = mensajeConfirmacionCancelarPorDefecto("Desea eliminar la fila seleccionada");
                if (eleccion == 0) {
                    FuncionesJTable.obtenerDefaultTableModel(jTableModeloHistorialAcademico).removeRow(indiceSelecionado);
                }
            }
        }
    }//GEN-LAST:event_jTableModeloHistorialAcademicoMouseClicked

    private void jTableModeloHistorialAcademicoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableModeloHistorialAcademicoFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jTableModeloHistorialAcademicoFocusLost

    private void jPanelConfiguracionCabecerasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanelConfiguracionCabecerasFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanelConfiguracionCabecerasFocusLost

    private void jTableModeloHistorialAcademicoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableModeloHistorialAcademicoKeyPressed
        // TODO add your handling code here:
        FuncionesJTable.agregarFilaPresionandoEnterJTable(jTableModeloHistorialAcademico, evt);
    }//GEN-LAST:event_jTableModeloHistorialAcademicoKeyPressed

    private void jTableModeloEstudiantesActivosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableModeloEstudiantesActivosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloEstudiantesActivosFocusLost

    private void jTableModeloEstudiantesActivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableModeloEstudiantesActivosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloEstudiantesActivosMouseClicked

    private void jTableModeloEstudiantesActivosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableModeloEstudiantesActivosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloEstudiantesActivosKeyPressed

    private void jTableModeloCurriculosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableModeloCurriculosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloCurriculosFocusLost

    private void jTableModeloCurriculosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableModeloCurriculosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloCurriculosMouseClicked

    private void jTableModeloCurriculosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableModeloCurriculosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloCurriculosKeyPressed

    private void jTableModeloEstudiantesActivosGeneralFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableModeloEstudiantesActivosGeneralFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloEstudiantesActivosGeneralFocusLost

    private void jTableModeloEstudiantesActivosGeneralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableModeloEstudiantesActivosGeneralMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloEstudiantesActivosGeneralMouseClicked

    private void jTableModeloEstudiantesActivosGeneralKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableModeloEstudiantesActivosGeneralKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloEstudiantesActivosGeneralKeyPressed

    private void jTableModeloProgramacionArgosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableModeloProgramacionArgosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloProgramacionArgosFocusLost

    private void jTableModeloProgramacionArgosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableModeloProgramacionArgosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloProgramacionArgosMouseClicked

    private void jTableModeloProgramacionArgosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableModeloProgramacionArgosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableModeloProgramacionArgosKeyPressed

    private void jTextFieldIDESTUDIANTEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIDESTUDIANTEKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            cargarHistorialAcademicoEstudiante();
        }
    }//GEN-LAST:event_jTextFieldIDESTUDIANTEKeyPressed

    private void jTextFieldIDESTUDIANTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDESTUDIANTEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIDESTUDIANTEActionPerformed

    private void jComboBoxCarrerasEstudiantesProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCarrerasEstudiantesProgramaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCarrerasEstudiantesProgramaActionPerformed

    private void jComboBoxCarrerasEstudiantesProgramaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCarrerasEstudiantesProgramaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            Cargando ventanaCargar = new Cargando(jDialogCarga);

            new Thread() {
                public void run() {
                    EstudiantesPorPrograma.cargarCurriculosComboBoxCarreras(CONN, (String) evt.getItem(), jComboBoxCurriculo);
                    actualizarEstudiantesPorPrograma(evt);
                    cargarTablaEstudiantesPorPrograma();
                    ventanaCargar.detener();
                }
            }.start();

        }
    }//GEN-LAST:event_jComboBoxCarrerasEstudiantesProgramaItemStateChanged

    private void jComboBoxSedeEstudiantesProgramaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSedeEstudiantesProgramaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Cargando ventanaCargar = new Cargando(jDialogCarga);

            new Thread() {
                public void run() {
                    String sede = (String) jComboBoxSedeEstudiantesPrograma.getSelectedItem();
                    String programa = (String) jComboBoxCarrerasEstudiantesPrograma.getSelectedItem();
                    String curriculo = (String) jComboBoxCurriculo.getSelectedItem();
                    EstudiantesPorPrograma.cargarMatriculadosArgoslTextField(CONN, jTextFieldTotalMatriculadosArgos,
                            sede,
                            programa,
                            curriculo);
                    EstudiantesPorPrograma.cargarMatriculadosGeneralTextField(CONN, jTextFieldTotalMatriculadosEstudiantesPorProgramaGeneral,
                            sede,
                            programa,
                            curriculo);

                    cargarTablaEstudiantesPorPrograma();
                    ventanaCargar.detener();
                }
            }.start();

        }
    }//GEN-LAST:event_jComboBoxSedeEstudiantesProgramaItemStateChanged

    private void jTableEstudiantesPorProgramaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEstudiantesPorProgramaMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {

            int columnaClickeada = jTableEstudiantesPorPrograma.getSelectedColumn();

            int columnaNoLaHanVisto = jTableEstudiantesPorPrograma
                    .getColumn("NoLoHanVisto")
                    .getModelIndex();
            int columnaLaPuedenVer = jTableEstudiantesPorPrograma
                    .getColumn("LaPuedenVer")
                    .getModelIndex();
            int columnaLaReprobaronYNohanAprobado = jTableEstudiantesPorPrograma
                    .getColumn("LaReprobaronYNoHanAprobado")
                    .getModelIndex();

            int fila = jTableEstudiantesPorPrograma.getSelectedRow();
            int columnaAN = jTableEstudiantesPorPrograma.getColumn("alfanumerico").getModelIndex();
            int columnaAsignatura = jTableEstudiantesPorPrograma.getColumn("asignatura").getModelIndex();

            String alfanumerico = (String) jTableEstudiantesPorPrograma.getValueAt(fila, columnaAN);
            String asignatura = (String) jTableEstudiantesPorPrograma.getValueAt(fila, columnaAsignatura);

            if (columnaClickeada == columnaNoLaHanVisto) {
                try {
                    ResultSet rs = CONN.createStatement().executeQuery("select "
                            + " " + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + ".* "
                            + " from "
                            + ENHV.NOMBRETABLANOHANVISTOAN + alfanumerico
                            + " LEFT JOIN "
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS
                            + " ON "
                            + ENHV.NOMBRETABLANOHANVISTOAN + alfanumerico + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTEHISTORIALACADEMICO
                            + "="
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTESACTIVOSARGOS
                            + " group by " + ENHV.NOMBRETABLANOHANVISTOAN + alfanumerico + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTEHISTORIALACADEMICO
                    );
                    new JFrameJTable("No han visto " + asignatura + " " + alfanumerico, rs);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (columnaClickeada == columnaLaReprobaronYNohanAprobado) {

                try {
                    ResultSet rs = CONN.createStatement().executeQuery("select "
                            + " " + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + ".* "
                            + " from "
                            + ENHV.NOMBRETABLAPERDIERONYNOHANAPROBADOALFANUMERICO + alfanumerico
                            + " LEFT JOIN "
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS
                            + " ON "
                            + ENHV.NOMBRETABLAPERDIERONYNOHANAPROBADOALFANUMERICO + alfanumerico + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTEHISTORIALACADEMICO
                            + "="
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTESACTIVOSARGOS
                            + " group by " + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTESACTIVOSARGOS
                    );
                    new JFrameJTable("No han aprobado " + asignatura + " " + alfanumerico, rs);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                System.out.println(jTableEstudiantesPorPrograma.getValueAt(fila, columnaAN));
            }

            if (columnaClickeada == columnaLaPuedenVer) {
                try {
                    ResultSet rs = CONN.createStatement().executeQuery("select "
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + ".*, "
                            + ENHV.NOMBRETABLANOHANVISTOYPUEDENVER + alfanumerico + ".creditosaprobados "
                            + " from "
                            + ENHV.NOMBRETABLANOHANVISTOYPUEDENVER + alfanumerico
                            + " LEFT JOIN "
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS
                            + " ON "
                            + ENHV.NOMBRETABLANOHANVISTOYPUEDENVER + alfanumerico + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTEHISTORIALACADEMICO
                            + "="
                            + ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTESACTIVOSARGOS
                            +" group by "+ ConsultasSQL.NOMBRETABLATEMPORAL_ESTUDIANTESACTIVOS + "." + ConsultasSQL.COLUMNACODIGOESTUDIANTESACTIVOSARGOS
                    );
                    new JFrameJTable("Pueden ver " + asignatura + " " + alfanumerico, rs);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                System.out.println(jTableEstudiantesPorPrograma.getValueAt(fila, columnaAN));
            }

        }
    }//GEN-LAST:event_jTableEstudiantesPorProgramaMouseClicked

    private void jComboBoxCurriculoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCurriculoItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Cargando ventanaCargar = new Cargando(jDialogCarga);

            new Thread() {
                public void run() {
                    String sede = (String) jComboBoxSedeEstudiantesPrograma.getSelectedItem();
                    String programa = (String) jComboBoxCarrerasEstudiantesPrograma.getSelectedItem();
                    String curriculo = (String) jComboBoxCurriculo.getSelectedItem();
                    EstudiantesPorPrograma.cargarMatriculadosArgoslTextField(CONN, jTextFieldTotalMatriculadosArgos,
                            sede,
                            programa,
                            curriculo);
                    EstudiantesPorPrograma.cargarMatriculadosGeneralTextField(CONN, jTextFieldTotalMatriculadosEstudiantesPorProgramaGeneral,
                            sede,
                            programa,
                            curriculo);

                    cargarTablaEstudiantesPorPrograma();
                    ventanaCargar.detener();
                }
            }.start();

        }
    }//GEN-LAST:event_jComboBoxCurriculoItemStateChanged

    private void jButtonLoPuedenVerProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoPuedenVerProgramaActionPerformed
        // TODO add your handling code here:

        String sede = (String) jComboBoxSedeEstudiantesPrograma.getSelectedItem();
        String programa = (String) jComboBoxCarrerasEstudiantesPrograma.getSelectedItem();
        String curriculo = (String) jComboBoxCurriculo.getSelectedItem();

        EstudiantesPorPrograma.mostrarInformeTotalProgramaLoPuedenVer(CONN, ENHV, sede, programa, curriculo);
    }//GEN-LAST:event_jButtonLoPuedenVerProgramaActionPerformed

    private void jButtonLoPuedenVerTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoPuedenVerTotalActionPerformed
        // TODO add your handling code here:
        String sede = (String) jComboBoxSedeEstudiantesPrograma.getSelectedItem();
        
        Cargando ventanaCargar = new Cargando(jDialogCarga);

            new Thread() {
                public void run() {
                    EstudiantesPorPrograma.mostrarInformeTodosProgramasLoPuedenVer(CONN, ENHV, sede);
                    ventanaCargar.detener();
                }
            }.start();
        
        
    }//GEN-LAST:event_jButtonLoPuedenVerTotalActionPerformed

    private void eliminarElmentoJlist(javax.swing.JList<String> jList1, java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == evt.VK_DELETE) {

            ListModel<String> listaElementos = jList1.getModel();

            DefaultListModel<String> dlm = new DefaultListModel();
            dlm = (DefaultListModel<String>) listaElementos;

            for (String indice : jList1.getSelectedValuesList()) {
                dlm.removeElement(indice);
            }
            jList1.setModel(dlm);
        }
    }

    private void dragDropjList(javax.swing.JList<String> jList) {
        new FileDrop(jList, new FileDrop.Listener() {
            @Override
            public void filesDropped(File[] files) {
                ListModel<String> listadoArchivos = jList.getModel();
                DefaultListModel dlm = new DefaultListModel();

                for (int i = 0; i < listadoArchivos.getSize(); i++) {
                    dlm.addElement(listadoArchivos.getElementAt(i));
                }

                for (File file : files) {
                    boolean esta = false;
                    for (int i = 0; i < dlm.getSize(); i++) {
                        if (((String) dlm.getElementAt(i)).equals((String) file.getAbsolutePath())) {
                            esta = true;
                            break;
                        }
                    }
                    if (!esta) {
                        dlm.addElement(file.getAbsolutePath());
                    }
                }

                jList.setModel(dlm);
            }
        });
    }

    public ArrayList<String> obtenerArrayListJList(JList jlist) {
        ArrayList<String> listado = new ArrayList<String>();

        for (int i = 0; i < jlist.getModel().getSize(); i++) {
            listado.add((String) jlist.getModel().getElementAt(i));
        }

        return listado;
    }

    public void iniciarConstantes() {
        C = GuardarDatos.recuperarDatos();
        pasarValoresGuardadosAJSwing();
        System.out.println("Constantes iniciadas");
    }

    public void pasarValoresGuardadosAJSwing() {
        pasarListModelAJList(jListHistorialAcademico, C.DLHISTORIALACADEMICO);
        pasarListModelAJList(jListNRCEstudiantesActivos, C.DLNRCESTUDIANTESACTIVOS);
        pasarListModelAJList(jListCurriculos, C.DLCURRICULOS);
        pasarListModelAJList(jListEstudiantesActivosGeneral, C.DLESTUDIANTESACTIVOSGENERAL);
        pasarListModelAJList(jListProgramacionAcademicaArgos, C.DLPROGRAMACIONACADEMICAARGOS);
    }

    public void pasarValorGuardadoAJTextField(JTextField jtf, String valor) {
        if (valor != null) {
            jtf.setText(valor);
        }
    }

    public void pasarListModelAJList(JList jl, ArrayList<String> ls) {
        if (ls != null) {
            DefaultListModel dlm = new DefaultListModel();
            for (String item : ls) {
                dlm.addElement(item);
            }
            jl.setModel(dlm);
        }
    }

    public int mensajeConfirmacionCancelarPorDefecto(String mensaje) {
        //Custom button text
        Object[] options = {"Si", "No", "Cancelar"};
        return JOptionPane.showOptionDialog(this,
                mensaje,
                "Confirmar",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, options, options[2]);
    }

    public void guardarDatos() {
        // TODO add your handling code here:
        String cabecerasHistorialAcademico = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloHistorialAcademico, 0);
        String tiposDatosHistorialAcademico = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloHistorialAcademico, 1);

        String cabecerasEstudiantesActivos = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloEstudiantesActivos, 0);
        String tiposDatosEstudiantesActivos = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloEstudiantesActivos, 1);

        String cabecerasCurriculos = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloCurriculos, 0);
        String tiposDatosCurriculos = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloCurriculos, 1);

        String cabecerasEstudiantesActivosGeneral = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloEstudiantesActivosGeneral, 0);
        String tiposDatosEstudiantesActivosGeneral = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloEstudiantesActivosGeneral, 1);

        String cabecerasProgramacionArgos = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloProgramacionArgos, 0);
        String tiposDatosProgramacionArgos = FuncionesJTable.obtenerCSVColumnaJTable(jTableModeloProgramacionArgos, 1);

        Constantes c = new Constantes(cabecerasHistorialAcademico,
                tiposDatosHistorialAcademico,
                cabecerasEstudiantesActivos,
                tiposDatosEstudiantesActivos,
                cabecerasCurriculos,
                tiposDatosCurriculos,
                cabecerasEstudiantesActivosGeneral,
                tiposDatosEstudiantesActivosGeneral,
                cabecerasProgramacionArgos,
                tiposDatosProgramacionArgos,
                obtenerArrayListJList(jListHistorialAcademico),
                obtenerArrayListJList(jListNRCEstudiantesActivos),
                obtenerArrayListJList(jListCurriculos),
                obtenerArrayListJList(jListEstudiantesActivosGeneral),
                obtenerArrayListJList(jListProgramacionAcademicaArgos));
//                
        GuardarDatos.guardarDatos(c);
        System.out.println("Guardando");
    }

    public void cerrarConexionBD() {
        try {
            CONN.close();
            System.out.println("Conexión a la base de datos cerrada");
        } catch (Exception e) {
            Validaciones.mostrarErroresTotal("No se pudo cerrar la conexión a la base de datos", e);
        }
    }

    public void cargarHistorialAcademicoEstudiante() {
        Cargando ventanaCarga = new Cargando(jDialogCarga);
        DefaultTableModel dtm = new DefaultTableModel();
        new Thread() {
            public void run() {
                long t1 = System.currentTimeMillis();
                ResultSet rs = ConsultasSQL.historialAcademicoEstudianteVsCurriculoMatriculado(CONN, Integer.parseInt(jTextFieldIDESTUDIANTE.getText()));
                ConversorResultSetADefaultTableModel.rellena(rs, dtm);
                jTableHistorialAcademicoEstudiante.setModel(dtm);

                jTextFieldNombre.setText(ConsultasSQL.obtenerNombreEstudiantesActivosGeneral(CONN, Integer.parseInt(jTextFieldIDESTUDIANTE.getText())));
                ventanaCarga.detener();

                jTextFieldAnoIngreso.setText("" + ConsultasSQL.obtenerPeriodoAdmisiónEstudiantesActivosGeneral(CONN, Integer.parseInt(jTextFieldIDESTUDIANTE.getText())));

                jTextFieldProgramaHistorial.setText("" + ConsultasSQL.obtenerProgramaMatriculadoEstudiantesActivosGeneral(CONN, Integer.parseInt(jTextFieldIDESTUDIANTE.getText())));

                jTextFieldCurriculoHistorial.setText("" + ConsultasSQL.obtenerCurriculoEstudiantesActivosGeneral(CONN, Integer.parseInt(jTextFieldIDESTUDIANTE.getText())));

                if (rs == null) {
                    Validaciones.mostrarVentanaError("No se encontraron datos para el id " + jTextFieldIDESTUDIANTE.getText());
                }
            }
        }.start();
    }

    public void actualizarEstudiantesPorPrograma(java.awt.event.ItemEvent evt) {

//        Cargando ventanaCarga = new Cargando(jDialogCarga);
        
//        
//        new Thread() {
//            public void run() {

        String sede = (String) jComboBoxSedeEstudiantesPrograma.getSelectedItem();
        String programa = (String) jComboBoxCarrerasEstudiantesPrograma.getSelectedItem();
        String curriculo = (String) jComboBoxCurriculo.getSelectedItem();

        EstudiantesPorPrograma.cargarDescripcionCarreraEnTextField(CONN, jComboBoxCarrerasEstudiantesPrograma, jTextFieldDescripcionCarrera);
        EstudiantesPorPrograma.cargarMatriculadosArgoslTextField(CONN, jTextFieldTotalMatriculadosArgos,
                sede,
                programa,
                curriculo);
        EstudiantesPorPrograma.cargarMatriculadosGeneralTextField(CONN, jTextFieldTotalMatriculadosEstudiantesPorProgramaGeneral,
                sede,
                programa,
                curriculo);
//                ventanaCarga.detener();
//            }
//        }.start();

    }

    public void cargarTablaEstudiantesPorPrograma() {
//        Cargando ventanaCarga = new Cargando(jDialogCarga);
//
//        new Thread() {
//            public void run() {
        String sede = (String) jComboBoxSedeEstudiantesPrograma.getSelectedItem();
        String programa = (String) jComboBoxCarrerasEstudiantesPrograma.getSelectedItem();
        String curriculo = (String) jComboBoxCurriculo.getSelectedItem();

        ENHV = new EstudiantesNoHanVistoNRC(CONN, sede, programa, curriculo);
        String nombreTabla = ENHV.crearTablaTemporalFinalNoLaHanVistoLaPuedenVer();

        try {

            ConversorResultSetADefaultTableModel.rellena(CONN.createStatement().executeQuery("select * from " + nombreTabla),
                    (DefaultTableModel) jTableEstudiantesPorPrograma.getModel());
            TableRowFilterSupport.forTable(jTableEstudiantesPorPrograma).apply();
        } catch (Exception e) {
            Validaciones.mostrarErroresTotal("No se pudo cargar la tabla de estudiantes por programa", e);
        }
//                ventanaCarga.detener();
//            }
//        }.start();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonLoPuedenVerPrograma;
    private javax.swing.JButton jButtonLoPuedenVerTotal;
    private javax.swing.JButton jButtonNoLoHanVistoPrograma;
    private javax.swing.JButton jButtonNoLoHanVistoTotal;
    private javax.swing.JButton jButtonValidarCabecerasArchivosInsumos;
    private javax.swing.JCheckBox jCheckBoxCurriculos;
    private javax.swing.JCheckBox jCheckBoxEstudiantesActivosGeneral;
    private javax.swing.JCheckBox jCheckBoxEstudiantesActivosNRC;
    private javax.swing.JCheckBox jCheckBoxHistorial;
    private javax.swing.JCheckBox jCheckBoxProgramacionArgos;
    private javax.swing.JComboBox<String> jComboBoxCarrerasEstudiantesPrograma;
    private javax.swing.JComboBox<String> jComboBoxCurriculo;
    private javax.swing.JComboBox<String> jComboBoxSedeEstudiantesPrograma;
    private javax.swing.JDialog jDialogCarga;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCurriculo;
    private javax.swing.JList<String> jListCurriculos;
    private javax.swing.JList<String> jListEstudiantesActivosGeneral;
    private javax.swing.JList<String> jListHistorialAcademico;
    private javax.swing.JList<String> jListNRCEstudiantesActivos;
    private javax.swing.JList<String> jListProgramacionAcademicaArgos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelArchivosInsumos;
    private javax.swing.JPanel jPanelBotonesValidar;
    private javax.swing.JPanel jPanelConfiguracionCabeceras;
    private javax.swing.JPanel jPanelCurriculos;
    private javax.swing.JPanel jPanelEstudiantesActivos;
    private javax.swing.JPanel jPanelEstudiantesActivosGeneral;
    private javax.swing.JPanel jPanelEstudiantesPorPrograma;
    private javax.swing.JPanel jPanelHistorialAcademico;
    private javax.swing.JPanel jPanelHistorialEstudiante;
    private javax.swing.JPanel jPanelProgramacionAcademicaArgos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableEstudiantesPorPrograma;
    private javax.swing.JTable jTableHistorialAcademicoEstudiante;
    private javax.swing.JTable jTableModeloCurriculos;
    private javax.swing.JTable jTableModeloEstudiantesActivos;
    private javax.swing.JTable jTableModeloEstudiantesActivosGeneral;
    private javax.swing.JTable jTableModeloHistorialAcademico;
    private javax.swing.JTable jTableModeloProgramacionArgos;
    private javax.swing.JTextField jTextFieldAnoIngreso;
    private javax.swing.JTextField jTextFieldCurriculoHistorial;
    private javax.swing.JTextField jTextFieldDescripcionCarrera;
    private javax.swing.JTextField jTextFieldIDESTUDIANTE;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldProgramaHistorial;
    private javax.swing.JTextField jTextFieldTotalMatriculadosArgos;
    private javax.swing.JTextField jTextFieldTotalMatriculadosEstudiantesPorProgramaGeneral;
    // End of variables declaration//GEN-END:variables
}
